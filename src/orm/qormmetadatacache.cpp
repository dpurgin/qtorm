#include "qormmetadatacache.h"
#include "qormpropertymapping.h"

#include <QMetaObject>
#include <QMetaProperty>
#include <QHash>

class QOrmMetadataCachePrivate
{
    friend class QOrmMetadataCache;

    QHash<QString, QOrmMetadata> m_cache;
};

QOrmMetadataCache::QOrmMetadataCache()
    : d{new QOrmMetadataCachePrivate}
{
}

QOrmMetadataCache::QOrmMetadataCache(QOrmMetadataCache&&) = default;

QOrmMetadataCache& QOrmMetadataCache::operator=(QOrmMetadataCache&&) = default;

QOrmMetadataCache::~QOrmMetadataCache() = default;

const QOrmMetadata& QOrmMetadataCache::operator[](const QMetaObject& qMetaObject)
{
    QString className = QString::fromUtf8(qMetaObject.className());

    if (!d->m_cache.contains(qMetaObject.className()))
    {
        QOrmMetadata entityMetadata{qMetaObject};
        entityMetadata.setClassName(QString::fromUtf8(qMetaObject.className()));
        entityMetadata.setTableName(QString::fromUtf8(qMetaObject.className()));

        for (int i = 0; i < qMetaObject.propertyCount(); ++i)
        {
            QOrmPropertyMapping propertyMapping;

            QMetaProperty property = qMetaObject.property(i);

            // skip all properties of QObject
            if (property.enclosingMetaObject() == &QObject::staticMetaObject)
                continue;

            propertyMapping.setClassPropertyName(QString::fromUtf8(property.name()));
            propertyMapping.setTableFieldName(QString::fromUtf8(property.name()));
            propertyMapping.setDataType(property.type());

            if (propertyMapping.classPropertyName().compare("id", Qt::CaseInsensitive) == 0)
            {
                propertyMapping.setIsObjectId(true);
                propertyMapping.setIsAutogenerated(true);
                entityMetadata.setObjectIdMapping(propertyMapping);
            }

            entityMetadata.addPropertyMapping(std::move(propertyMapping));
        }

        d->m_cache[className] = entityMetadata;
    }

    return d->m_cache[className];
}
