#include <QtTest>

#include <QOrmMetadataCache>

class Province : public QObject
{
    Q_OBJECT

    Q_PROPERTY(int id READ id WRITE setId NOTIFY idChanged)
    Q_PROPERTY(QString name READ name WRITE setName NOTIFY nameChanged)

    int m_id;
    QString m_name;

public:
    explicit Province(QObject *parent = nullptr);

    int id() const;
    void setId(int id);

    QString name() const;
    void setName(QString name);

signals:
    void idChanged(int id);
    void nameChanged(QString name);
};

Province::Province(QObject *parent)
    : QObject(parent)
{
}

int Province::id() const
{
    return m_id;
}

QString Province::name() const
{
    return m_name;
}

void Province::setId(int id)
{
    if (m_id == id)
        return;

    m_id = id;
    emit idChanged(m_id);
}

void Province::setName(QString name)
{
    if (m_name == name)
        return;

    m_name = name;
    emit nameChanged(m_name);
}

class MetadataCacheTest : public QObject
{
    Q_OBJECT

public:
    MetadataCacheTest();
    ~MetadataCacheTest();

private slots:
    void testDefaultMetadata();

};

MetadataCacheTest::MetadataCacheTest()
{

}

MetadataCacheTest::~MetadataCacheTest()
{

}

void MetadataCacheTest::testDefaultMetadata()
{
    QOrmMetadataCache cache;
    const QOrmMetadata& metadata = cache.get<Province>();

    QCOMPARE(metadata.className(), "Province");
    QCOMPARE(metadata.tableName(), "Province");

    QVERIFY(metadata.objectIdMapping() != nullptr);
    QCOMPARE(metadata.objectIdMapping()->dataType(), QVariant::Int);
    QVERIFY(metadata.objectIdMapping()->isObjectId());
    QVERIFY(metadata.objectIdMapping()->isAutogenerated());
    QCOMPARE(metadata.objectIdMapping()->classPropertyName(), "id");
    QCOMPARE(metadata.objectIdMapping()->tableFieldName(), "id");

    auto mappings = metadata.propertyMappings();
    QCOMPARE(mappings.size(), 2);

    QCOMPARE(mappings[0].tableFieldName(), "id");
    QCOMPARE(mappings[0].classPropertyName(), "id");
    QCOMPARE(mappings[0].dataType(), QVariant::Int);
    QVERIFY(mappings[0].isObjectId());
    QVERIFY(mappings[0].isAutogenerated());

    QCOMPARE(mappings[1].tableFieldName(), "name");
    QCOMPARE(mappings[1].classPropertyName(), "name");
    QCOMPARE(mappings[1].dataType(), QVariant::String);
    QVERIFY(!mappings[1].isObjectId());
    QVERIFY(!mappings[1].isAutogenerated());

    {
        auto mapping = metadata.classPropertyMapping("id");
        QVERIFY(mapping != nullptr);
        QCOMPARE(mapping->tableFieldName(), "id");
        QCOMPARE(mapping->classPropertyName(), "id");
        QCOMPARE(mapping->dataType(), QVariant::Int);
        QVERIFY(mapping->isObjectId());
        QVERIFY(mapping->isAutogenerated());
    }

    {
        auto mapping = metadata.classPropertyMapping("name");
        QVERIFY(mapping != nullptr);
        QCOMPARE(mapping->tableFieldName(), "name");
        QCOMPARE(mapping->classPropertyName(), "name");
        QCOMPARE(mapping->dataType(), QVariant::String);
        QVERIFY(!mapping->isObjectId());
        QVERIFY(!mapping->isAutogenerated());
    }

    {
        auto mapping = metadata.tableFieldMapping("id");
        QVERIFY(mapping != nullptr);
        QCOMPARE(mapping->tableFieldName(), "id");
        QCOMPARE(mapping->classPropertyName(), "id");
        QCOMPARE(mapping->dataType(), QVariant::Int);
        QVERIFY(mapping->isObjectId());
        QVERIFY(mapping->isAutogenerated());
    }

    {
        auto mapping = metadata.tableFieldMapping("name");
        QVERIFY(mapping != nullptr);
        QCOMPARE(mapping->tableFieldName(), "name");
        QCOMPARE(mapping->classPropertyName(), "name");
        QCOMPARE(mapping->dataType(), QVariant::String);
        QVERIFY(!mapping->isObjectId());
        QVERIFY(!mapping->isAutogenerated());
    }
}

QTEST_APPLESS_MAIN(MetadataCacheTest)

#include "tst_metadatacachetest.moc"
