/*
 * Copyright (C) 2019 Dmitriy Purgin <dmitriy.purgin@sequality.at>
 * Copyright (C) 2019 sequality software engineering e.U. <office@sequality.at>
 *
 * This file is part of QtOrm library.
 *
 * QtOrm is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * QtOrm is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with QtOrm.  If not, see <https://www.gnu.org/licenses/>.
 */

#include <QtTest>

#include <QOrmMetadataCache>

#include "domain/person.h"
#include "domain/province.h"
#include "domain/town.h"

class MetadataCacheTest : public QObject
{
    Q_OBJECT

public:
    MetadataCacheTest();
    ~MetadataCacheTest();

private slots:
    void initTestCase();

    void testDefaultMetadata();
    void testOneToOneReference();
    void testManyToOneReference();
};

MetadataCacheTest::MetadataCacheTest()
{

}

MetadataCacheTest::~MetadataCacheTest()
{

}

void MetadataCacheTest::initTestCase()
{
    qRegisterOrmEntity<Town, Person>();
}

void MetadataCacheTest::testDefaultMetadata()
{
    QOrmMetadataCache cache;
    const QOrmMetadata& metadata = cache.get<Province>();

    QCOMPARE(metadata.className(), "Province");
    QCOMPARE(metadata.tableName(), "Province");

    QVERIFY(metadata.objectIdMapping() != nullptr);
    QCOMPARE(metadata.objectIdMapping()->dataType(), QVariant::Int);
    QVERIFY(metadata.objectIdMapping()->isObjectId());
    QVERIFY(metadata.objectIdMapping()->isAutogenerated());
    QCOMPARE(metadata.objectIdMapping()->classPropertyName(), "id");
    QCOMPARE(metadata.objectIdMapping()->tableFieldName(), "id");

    auto mappings = metadata.propertyMappings();
    QCOMPARE(mappings.size(), 2u);

    QCOMPARE(mappings[0].tableFieldName(), "id");
    QCOMPARE(mappings[0].classPropertyName(), "id");
    QCOMPARE(mappings[0].dataType(), QVariant::Int);
    QVERIFY(mappings[0].isObjectId());
    QVERIFY(mappings[0].isAutogenerated());
    QVERIFY(!mappings[0].isReference());

    QCOMPARE(mappings[1].tableFieldName(), "name");
    QCOMPARE(mappings[1].classPropertyName(), "name");
    QCOMPARE(mappings[1].dataType(), QVariant::String);
    QVERIFY(!mappings[1].isObjectId());
    QVERIFY(!mappings[1].isAutogenerated());
    QVERIFY(!mappings[1].isReference());

    {
        auto mapping = metadata.classPropertyMapping("id");
        QVERIFY(mapping != nullptr);
        QCOMPARE(mapping->tableFieldName(), "id");
        QCOMPARE(mapping->classPropertyName(), "id");
        QCOMPARE(mapping->dataType(), QVariant::Int);
        QVERIFY(mapping->isObjectId());
        QVERIFY(mapping->isAutogenerated());
        QVERIFY(!mapping->isReference());
    }

    {
        auto mapping = metadata.classPropertyMapping("name");
        QVERIFY(mapping != nullptr);
        QCOMPARE(mapping->tableFieldName(), "name");
        QCOMPARE(mapping->classPropertyName(), "name");
        QCOMPARE(mapping->dataType(), QVariant::String);
        QVERIFY(!mapping->isObjectId());
        QVERIFY(!mapping->isAutogenerated());
        QVERIFY(!mapping->isReference());
    }

    {
        auto mapping = metadata.tableFieldMapping("id");
        QVERIFY(mapping != nullptr);
        QCOMPARE(mapping->tableFieldName(), "id");
        QCOMPARE(mapping->classPropertyName(), "id");
        QCOMPARE(mapping->dataType(), QVariant::Int);
        QVERIFY(mapping->isObjectId());
        QVERIFY(mapping->isAutogenerated());
        QVERIFY(!mapping->isReference());
    }

    {
        auto mapping = metadata.tableFieldMapping("name");
        QVERIFY(mapping != nullptr);
        QCOMPARE(mapping->tableFieldName(), "name");
        QCOMPARE(mapping->classPropertyName(), "name");
        QCOMPARE(mapping->dataType(), QVariant::String);
        QVERIFY(!mapping->isObjectId());
        QVERIFY(!mapping->isAutogenerated());
        QVERIFY(!mapping->isReference());
    }
}

void MetadataCacheTest::testOneToOneReference()
{
    QOrmMetadataCache cache;
    QOrmMetadata personMetadata = cache.get<Person>();

    QCOMPARE(personMetadata.className(), "Person");
    QCOMPARE(personMetadata.tableName(), "Person");

    auto provincePropertyMapping = personMetadata.classPropertyMapping("town");

    QCOMPARE(provincePropertyMapping->classPropertyName(), "town");
    QCOMPARE(provincePropertyMapping->tableFieldName(), "town_id");
    QCOMPARE(provincePropertyMapping->dataType(), QVariant::UserType);
    QVERIFY(provincePropertyMapping->isReference());
    QVERIFY(provincePropertyMapping->referencedEntity() != nullptr);
    QCOMPARE(provincePropertyMapping->referencedEntity()->className(), "Town");
}

void MetadataCacheTest::testManyToOneReference()
{
    QOrmMetadataCache cache;
    QOrmMetadata townMetadata = cache.get<Town>();

    QCOMPARE(townMetadata.className(), "Town");
    QCOMPARE(townMetadata.tableName(), "Town");

    auto populationPropertyMapping = townMetadata.classPropertyMapping("population");

    QCOMPARE(populationPropertyMapping->classPropertyName(), "population");
    QVERIFY(populationPropertyMapping->tableFieldName().isEmpty());
    QCOMPARE(populationPropertyMapping->dataType(), QVariant::UserType);
    QVERIFY(populationPropertyMapping->isReference());
    QVERIFY(populationPropertyMapping->isTransient());
    QVERIFY(populationPropertyMapping->referencedEntity() != nullptr);
    QCOMPARE(populationPropertyMapping->referencedEntity()->className(), "Person");
}

QTEST_APPLESS_MAIN(MetadataCacheTest)

#include "tst_metadatacachetest.moc"
